linel : 120;
fpprintprec : 6;

S : matrix([2, 1], [1, 2]);
eigenvalues(S);

mu0 : [1, 0];
mu1 : [7/2, 1];
L : cholesky(S);
load (distrib);

xx0:makelist(float(L . [random_normal(0,1),random_normal(0,1)]+mu0),i,1,200);
xx1:makelist(float(L . [random_normal(0,1),random_normal(0,1)]+mu1),i,1,200);

xx0 : map(lambda([m],[m[1,1],m[2,1]]),xx0);
xx1 : map(lambda([m],[m[1,1],m[2,1]]),xx1);

maxima_tempdir : "/home/robert/playpen/github/pdxml-missing-data";

plot2d([[discrete, xx0], [discrete, xx1]],
       [legend, "class 0", "class 1"],
       [xlabel, "x_1"],
       [ylabel, "x_2"],
       [gnuplot_postamble, "set size ratio -1"],
       [style, [points, 0.8], [points, 0.8]],
       [svg_file, "tmp-two-class-scatterplot.svg"]);

Sinv : invert(S);
a : (mu1 - mu0) . Sinv;
a : [a[1,1], a[1,2]];
b : (1/2)*(mu0 . Sinv . mu0) - (1/2)*(mu1 . Sinv . mu1);

u(x1, x2) := a[1]*x1 + a[2]*x2 + b;
/* posterior class probability */
pcx (x1, x2) := 1/(1 + exp(-u(x1, x2)));

contour_plot (pcx, [x1, -4, 8], [x2, -5, 6],
              [gnuplot_postamble, "set size ratio -1"],
              [svg_file, "tmp-two-class-pcx-contours.svg"]);

/* conditional density of x1 given x2 */
px1_x2(x1, x2) := px2x1(x1, x2) / px2(x2);

/* joint density of x2 and x1; assume p(c=0) = p(c=1) = 1/2 */
px2x1(x1, x2) := px2x1_c0(x1, x2)*(1/2) + px2x1_c1(x1, x2)*(1/2);

/* joint density of x2 and x1 conditional on c = 0 */
px2x1_c0(x1, x2) := exp(-(1/2)*([x1, x2] - mu0) . Sinv . ([x1, x2] - mu0))/sqrt(determinant(S))/(2*%pi);

/* joint density of x2 and x1 conditional on c = 1 */
px2x1_c1(x1, x2) := exp(-(1/2)*([x1, x2] - mu1) . Sinv . ([x1, x2] - mu1))/sqrt(determinant(S))/(2*%pi);

/* marginal density of x2 */
px2(x2) := ''(expand (integrate (px2x1(x1, x2), x1, minf, inf)));

/* marginal density of x1 */
px1(x2) := ''(ratsimp (integrate (px2x1(x1, x2), x2, minf, inf)));

/* posterior class probability given only x2 */
pcx2 (x2) := ''(integrate (pcx(x1, x2) * px1_x2(x1, x2), x1, minf, inf));

plot2d (pcx2, [x2, -4, 8], [legend, false], [svg_file, "tmp-post-class1-given-only-x2.svg"]);

ratsimp (pcx2(x2));
tex(%);

/* simpler approximation #1: weight P(c=1|x1, x2) by P(x1) */

approximation1 : ratsimp (integrate (pcx(x1, x2) * px1(x1), x1, minf, inf));

pcx2_approx2(x2) := quad_qags (pcx(x1, x2) * px1(x1), x1, -20, +20)[1];

plot2d (pcx2_approx2, [x2, -4, 8], [legend, false], [svg_file, "tmp-post-class1-given-only-x2-approx2.svg"]);

/* simpler approximation #2: replace x1 by its mean conditional on x2 */

mean_x1_x2(x2) := ''(ratsimp (integrate (px1_x2(x1, x2) * x1, x1, minf, inf)));

pcx2_approx1(x2) := pcx(mean_x1_x2(x2), x2);

plot2d (pcx2_approx1, [x2, -4, 8], [legend, false], [svg_file, "tmp-post-class1-given-only-x2-approx1.svg"]);

/* simplest approximation: replace x1 by its unconditional mean */

mean_x1 : integrate (px1(x1) * x1, x1, minf, inf);

pcx2_approx3(x2) := pcx(mean_x1, x2);

plot2d (pcx2_approx3, [x2, -4, 8], [legend, false], [svg_file, "tmp-post-class1-given-only-x2-approx3.svg"]);

/* plot gold standard + all approximations */

plot2d ([pcx2, pcx2_approx2, pcx2_approx1, pcx2_approx3], [x2, -4, 8],
        [style, [lines, 1, 1], [lines, 1, 1], [lines, 1, 1], [lines, 1, 1]],
        [legend, false], [svg_file, "tmp-post-class1-given-only-x2-gold-std+all-approx.svg"]);
