linel : 120;
fpprintprec : 6;

S : matrix([2, 1], [1, 2]);
eigenvalues(S);

mu0 : [0, 1];
mu1 : [1, 7/2];
L : cholesky(S);
load (distrib);

xx0:makelist(float(L . [random_normal(0,1),random_normal(0,1)]+mu0),i,1,200);
xx1:makelist(float(L . [random_normal(0,1),random_normal(0,1)]+mu1),i,1,200);

xx0 : map(lambda([m],[m[1,1],m[2,1]]),xx0);
xx1 : map(lambda([m],[m[1,1],m[2,1]]),xx1);

maxima_tempdir : "/home/robert/playpen/github/pdxml-missing-data";

plot2d([[discrete, xx0], [discrete, xx1]],
       [legend, "class 0", "class 1"],
       [xlabel, "x_1"],
       [ylabel, "x_2"],
       [gnuplot_postamble, "set size ratio -1"],
       [style, [points, 0.8], [points, 0.8]],
       [svg_file, "two-class-scatterplot.svg"]);

Sinv : invert(S);
a : (mu1 - mu0) . Sinv;
a : [a[1,1], a[1,2]];
b : (1/2)*(mu0 . Sinv . mu0) - (1/2)*(mu1 . Sinv . mu1);

u(x1, x2) := a[1]*x1 + a[2]*x2 + b;
/* posterior class probability */
pcx (x1, x2) := 1/(1 + exp(-u(x1, x2)));

contour_plot (pcx, [x1, -5, 6], [x2, -4, 8],
              [gnuplot_postamble, "set size ratio -1"],
              [svg_file, "two-class-pcx-contours.svg"]);

/* conditional density of x2 given x1 */
px2_x1(x1, x2) := px1x2(x1, x2) / px1(x1);

/* joint density of x1 and x2; assume p(c=0) = p(c=1) = 1/2 */
px1x2(x1, x2) := px1x2_c0(x1, x2)*(1/2) + px1x2_c1(x1, x2)*(1/2);

/* joint density of x1 and x2 conditional on c = 0 */
px1x2_c0(x1, x2) := exp(-(1/2)*([x1, x2] - mu0) . Sinv . ([x1, x2] - mu0))/sqrt(determinant(S))/(2*%pi);

/* joint density of x1 and x2 conditional on c = 1 */
px1x2_c1(x1, x2) := exp(-(1/2)*([x1, x2] - mu1) . Sinv . ([x1, x2] - mu1))/sqrt(determinant(S))/(2*%pi);

/* marginal density of x1 */
px1(x1) := ''(expand (integrate (px1x2(x1, x2), x2, minf, inf)));

/* marginal density of x2 */
px2(x1) := ''(ratsimp (integrate (px1x2(x1, x2), x1, minf, inf)));

/* posterior class probability given only x1 */
pcx1 (x1) := ''(integrate (pcx(x1, x2) * px2_x1(x1, x2), x2, minf, inf));

plot2d (pcx1, [x1, -5, 6], [legend, false], [svg_file, "post-class1-given-only-x1.svg"]);

ratsimp (pcx1(x1));
tex(%);

/* simpler approximation #1: weight P(c=1|x1, x2) by P(x2) */

approximation1 : ratsimp (integrate (pcx(x1, x2) * px2(x2), x2, minf, inf));

pcx1_approx1(x1) := quad_qags (pcx(x1, x2) * px2(x2), x2, -20, +20)[1];

plot2d (pcx1_approx1, [x1, -5, 6], [legend, false], [svg_file, "post-class1-given-only-x1-approx1.svg"]);

/* simpler approximation #2: replace x2 by its mean conditional on x1 */

mean_x2_x1(x1) := ''(ratsimp (integrate (px2_x1(x1, x2) * x2, x2, minf, inf)));

pcx1_approx2(x1) := pcx(x1, mean_x2_x1(x1));

plot2d (pcx1_approx2, [x1, -5, 6], [legend, false], [svg_file, "post-class1-given-only-x1-approx2.svg"]);

/* simplest approximation: replace x2 by its unconditional mean */

mean_x2 : integrate (px2(x2) * x2, x2, minf, inf);

pcx1_approx3(x1) := pcx(x1, mean_x2);

plot2d (pcx1_approx3, [x1, -5, 6], [legend, false], [svg_file, "post-class1-given-only-x1-approx3.svg"]);

/* plot gold standard + all approximations */

plot2d ([pcx1, pcx1_approx1, pcx1_approx2, pcx1_approx3], [x1, -5, 6],
        [style, [lines, 1, 1], [lines, 1, 1], [lines, 1, 1], [lines, 1, 1]],
        [legend, false], [svg_file, "post-class1-given-only-x1-gold-std+all-approx.svg"]);
